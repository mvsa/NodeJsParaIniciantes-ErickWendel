NodeJs não é um framework JS > É uma plataforma voltada para criação
de aplicações JS

node{
    App > V8 (executa js) > bind para transformar JS em c++ > Executar na maquina pela LIBUV

    Pilha de eventos  bloqueantes, são delegados para o SO executar, após finalizado callback retorna
    para o solicitante

    Node é single thread manipulando o event loop, ele recebe as requests e repassa para a threadpool do servidor
    Quem trabalha com as threads é o S.O

    Event Loop  delega os eventos
}

JS {
    Tudo o que depende de execução externa (bancos, filesystems, etc) é executado em background
    Por conta disso nem sempre a ordem que eu defino o codigo vai representar a ordem de execução(func assincronas)

}


Promise{
    Não confundir uso com o eventEmmiter, a promise presa por após o evento ser executado a ação é encerrada (roda 1 vez)
    EventEmitter são para ações continuas
}

EventEmitter{
    Usado em ações continuas (cliques, arquivos, inputs de user, etc) 
    ("faça tal ação quando determinado gatilho for disparado")
    Bastante usado em browesers (ex .onCLick)
    Trabalha sob o desing pattern Observer/PubSub {
        Tenho um hub de mensagem e uma lista de publicadores envia suas ações a esse hub
        E tenho um conjunto de observers conectados a esse hub que a cada mensagem recebida o hub distribui para
        todo mundo que está conectado/ouvindo essa caixa/hub
    }
}

-------------------------


mkdir 
touch
npm init -y
.trim = remover espaços do inicio ou fim do texto
std

---------------------

Medindo tempo de exec{
    colocar no inicio e fim da instrução:

     console.time('ex');
     console.timeEnd('ex');

}

Leitura de linha de comando{
    Usando somente o Node.js puro, existem diversas formas de capturar
    a resposta do usuário, como o process.openStdin() onde você precisa aguardar
    por eventos para receber chamadas, e o módulo readline, que acho mais simples e fácil de utilizar.

    The process.stdin property is an inbuilt application programming interface
     of the process module which listens for the user input. The stdin property
      of the process object is a Readable Stream. It uses on() function to listen for the event.
}