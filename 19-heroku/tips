docker run --name postgres -e POSTGRES_USER=mavcs -e POSTGRES_PASSWORD=mysecret -e POSTGRES_DB=heros -p 5432:5432 -d postgres

docker run --name adminer -p 8080:8080 --link postgres:postgres -d adminer

docker run --name mongodb -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=senhaadmin -d mongo:4

docker run --name mongoclient -p 3000:3000 --link mongodb:mongodb -d mongoclient/mongoclient

{

    mongo
    name/hostport(mongodb)/database Name (admin)
    auth: scram-sha1/autentication db admin (nome do database criado)
}

criar usuario mongo
docker exec -it mongodb mongo --host localhost -u admin -p senhaadmin --authenticationDatabase admin --eval "db.getSiblingDB('herois').createUser({user:'marcos', pwd:'minhasenha', roles:[{role:'readWrite',db:'herois'}]})"


Design Pattern - strategy

Padrão comportamental
Permite que o algortimo avalie qual melhor opção para atingir o objetivo
ex: função de cadastrar heroi, posso cadastrar tanto no mongo quanto no postgres, e a gente manda qual a estrategia de implementação a ser usada


rm -rf node_modules


instalada dependencia globalmente, para alterar variaveis de ambiente em qualquer S.O sem
precisar se atentar as espefcificidades, ex: no windows para setar tem que ter a palavra set no terminal
npm i -g cross-env -- e local no repo tbm
cross-env NODE_ENV=prod npm t == roda os testes levando em conda env de prd

--instalada tbm dependencia para comunicação com heroku globalmente
npm install -g heroku

heroku login
heroku apps:list
heroku apps:create nomeapp
git init
heroku git:remote --app nomeapp -- seta o remote do  repo para o que o heroku criou

-cria arquivo de conf Procfile

git add, commit push heroku master

heroku logs (mostra os logs do servidor heroku)

-----------

postgres:
no heroku > 3 pontos superior direito - data > heroku postgre> install
na pagina do apps, na listagem de addosn, clica no link externo do postgres 
mostra as infos do banco > vai em settings > view credentials > URI


--------------------

PM2 Keymetrics = gerencia de apps
para melhor gerenciamento de erros, consumo, para não ter que ficar usando os logs
do heroku

npm install pm2 // e globalmente  npm install pm2 -g 
edita package json

pm2 start --name herois -i 10 api.js = roda a aplicação com 10 instancias (copias)
pm2 monit
pm2 logs
pm2 kill



integraçãoo com heroku:
pm2 init

-----------------------------------------------
Instanbul

npm install --save-dev nyc
--edições no package json script test